// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    iCenter: {
      type: vec2
      value: [0.5,0.5]
    }
    iResolution: {
      type: vec3
      displayName:'分辨率'
      value: [1280, 720, 0]
    }
    Strength:{
       type: float
        displayName:'模糊强度'
      value: 0.125
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute vec2 a_uv0;
varying vec2 uv0;
void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    gl_Position = pos;
    uv0 = a_uv0;
}
}

%% fs {

precision highp float;

uniform sampler2D texture;
uniform vec3 iResolution;
uniform vec2 iCenter;
uniform float Strength;
varying vec2 uv0;

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // const float Strength = 0.125;    
    const int Samples = 64; //multiple of 2
    
    vec2 uv = fragCoord.xy;
    
    vec2 dir = (fragCoord.xy-iCenter.xy);

    vec4 color = vec4(0.0,0.0,0.0,0.0);
    
    for (int i = 0; i < Samples; i += 2) //operating at 2 samples for better performance
    {
        color += texture2D(texture,uv+float(i)/float(Samples)*dir*Strength);
        color += texture2D(texture,uv+float(i+1)/float(Samples)*dir*Strength);
    }   
    
    fragColor = color/float(Samples);
}
    
void main(void)
{
    mainImage(gl_FragColor, uv0);
}
}
