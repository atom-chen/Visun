// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    },
     color: {
      type: color4
      displayName:'外发光颜色'
      value: [1, 1, 1, 1]
    },
    // radius:{
    //   type:float,
    //   value:2.0
    // },
  iResolution:{
    type:vec3,
    displayName:'分辨率'
    value:[1280,720,0]
  }
  }
%}

%% vs {

precision highp float;
 uniform mat4 cc_matViewProj;
    attribute vec3 a_position;
    attribute vec2 a_uv0;
    varying vec2 uv0;
    void main () {
        vec4 pos = cc_matViewProj * vec4(a_position, 1);
        gl_Position = pos;
        uv0 = a_uv0;
    }
}

%% fs {

precision highp float;

// 贴图采样器，来自于v2f管线
uniform sampler2D texture;
// 发光半径，外界属性
// uniform float radius;
uniform vec3 iResolution;
uniform vec4 color;
// 当前点uv
varying vec2 uv0;
/* 因为这个参数，如果使用外部传入的话，在for循环哪儿，取不到 */
const float radius = 1.0;

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord.xy;
    vec2 unit = 1.0 / iResolution.xy;
    vec4 texel = texture2D(texture, uv);
    vec4 finalColor = vec4(0.0);
    float density = 0.0;

    if(texel.a >= 1.0)
    {
        finalColor = texel;
    }
    else
    {
        for(int i = 0; i < (int(radius)); ++i)
        {
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;
        }
        density = density / radius;
        finalColor = vec4(color.rgb * density, density);
        finalColor += vec4(texel.rgb * texel.a, texel.a);
    }
    fragColor = finalColor;
}

void main()
{
    mainImage(gl_FragColor, uv0.xy);
}
}