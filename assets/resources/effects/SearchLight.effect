// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    iResolution: {
      type: vec2
      displayName:'分辨率'
      value: [1280, 720, 0]
    }
    mouse: {
      type: vec2
      displayName:'鼠标'
      value: [640, 360]
    }
     radius: {
      type: vec2
      displayName:'半径'
      value: [100,100]
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;
    attribute vec4 a_position;
    attribute vec2 a_uv0;
    varying vec2 uv0;

    void main()
    {
        gl_Position = cc_matViewProj * a_position;
        uv0 = a_uv0;
    }
}

%% fs {

    precision highp float;


    // 贴图采样器，来自于v2f管线
    uniform sampler2D texture;
    // 当前点uv
    varying vec2 uv0;

    uniform vec2 iResolution;
    uniform vec2 mouse;
    uniform vec2 radius;

    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        // y坐标翻转
        vec2 imouse = vec2(mouse.x, iResolution.y - mouse.y);
        // 纹理坐标
        vec2 uv = uv0.xy ;
        // 纹理采样
        vec4 tex = texture2D(texture, uv);
        // 片元到鼠标点的差向量
        vec2 d = uv*iResolution.xy -imouse.xy ;
        // 光照半径
        vec2 s = radius;
        // 点积取比例
        float r = dot(d, d)/dot(s,s);
        vec4 finalColor =  tex * (1.08 - r);   
        fragColor = vec4(finalColor.rgb,0.75);
    }
    void main()
    {
        mainImage(gl_FragColor, uv0.xy);
    }
}
