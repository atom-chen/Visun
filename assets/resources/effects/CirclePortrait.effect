// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    u_edge: {
      type: float
      displayName:'边缘(0~1)'
      tooltip:'范围0~1'
      value: 0.5
    }
    u_offset: {
      type: float
       displayName:'边缘外发光(0~0.1)'
      value: 0.01
    }
    edge_blur: {
      type: float
       displayName:'边缘羽化(0.01~0.1)'
      value: 0.01
    }
    color0: {
      type: color4
      displayName:'颜色'
      value: [1, 1, 1, 1]
    }
    edge_color0: {
      type: color4
      displayName:'截取边缘颜色'
      value: [1, 1, 1, 0]
    }
  }
%}

%% vs {

    precision highp float;

    uniform mat4 cc_matViewProj;
    attribute vec4 a_position;
    attribute vec2 a_uv0;
    varying vec2 uv0;
    void main()
    {
        gl_Position = cc_matViewProj * a_position;
        uv0 = a_uv0;
    }
}

%% fs {

   precision highp float;

    // 贴图采样器，来自于v2f管线
    // 实测： 在 8 * 8 以下 和 600*600 以上的尺寸，在web上没问题
    uniform sampler2D texture;
    // 当前点uv
    varying vec2 uv0;
    
    uniform float u_edge;

    uniform vec4 color0; 

// 是否边缘羽化
#if IS_Edge_Blur
    uniform float edge_blur; 
#endif

// 是否边缘发光(不要和羽化一起使用，会有边)
#if IS_EdgeGlowing
    uniform float u_offset; 
#endif

// 是否使用边缘颜色
#if USE_EDGE_COLOR
    uniform vec4 edge_color0; 
#endif


// 应用贴图颜色 画圆
vec4 drawCircle() {
    float edge = u_edge;
    float dis = 0.0;

    float offset = 0.0;
    vec2 uv = uv0;

// 是否边缘发光
#if IS_EdgeGlowing
  offset =  u_offset; 
  uv = vec2(0.5 + (uv0.x - 0.5) * ((offset*2.0) + 1.0), 0.5 + (uv0.y - 0.5) * ((offset*2.0) + 1.0)); 
#endif
         
        if ( uv.x < edge )
        {
            if ( uv.y < edge )
            {
                dis = distance( uv, vec2(edge, edge) );
            }
            if ( uv.y > (1.0 - edge) )
            {
                dis = distance( uv, vec2(edge, (1.0 - edge)) );
            }
        }
        else if ( uv.x > (1.0 - edge) )
        {
            if ( uv.y < edge )
            {
                dis = distance( uv, vec2((1.0 - edge), edge ) );
            }
            if ( uv.y > (1.0 - edge) )
            {
                dis = distance( uv, vec2((1.0 - edge), (1.0 - edge) ) );
            }
        }

        // 混合外边颜色
        vec4 color = color0 * texture2D(texture,uv);
        // 边缘颜色
        vec4 edge_color = color;
        // 边缘羽化,默认0.01,减少抗锯齿
        float blur = 0.0;
      // 是否边缘羽化
      #if IS_Edge_Blur
          blur = edge_blur;
      #endif

      // 如果有外部颜色,重新定义 边缘颜色
      #if USE_EDGE_COLOR
        // 如果应用贴图颜色混合
        #if USER_TEXTURE_COLOR
          edge_color = edge_color0  * texture2D(texture,uv);
        #else
          edge_color = edge_color0;
        #endif
      #endif
        
        if(dis > 0.001)
        {
            // 外圈沟
            float gap = edge * blur;
            if(dis <= edge - gap)
            {
                color = color;
            }
            else if(dis <= edge)
            {
                // 平滑过渡: ret smoothstep(a, b, x) 可以用来生成0到1的平滑过渡.
                float t = smoothstep(0.,gap,edge-dis);
                
                // 边缘颜色和透明度
                color = vec4(edge_color.rgb,t * edge_color.a);
            }else{
                // 隐藏不要的部分
                
                // 是否边缘发光
                #if IS_EdgeGlowing
                    color = vec4(edge_color.rgb, (offset - (dis - edge))/offset); 
                  #else
                    color = vec4(edge_color.rgb,0.); 
                #endif
            }
        }
        else
        {
          // 是否边缘发光
          #if IS_EdgeGlowing
                float absX = abs(uv.x - 0.5);
                if(absX > 0.5)
                {
                    color = vec4( edge_color.rgb, (offset - (absX - 0.5))/offset);
                }
                else 
                {
                    float absY = abs(uv.y - 0.5);
                    if (absY > 0.5){
                        color = vec4( edge_color.rgb, (offset - (absX - 0.5))/offset);
                    }
                    else{
                          color =  color;
                    }
                }
            #else
              color =  color;
          #endif
        }
    return  color; 
}


    void main()
    {
      vec4 color = drawCircle();
      gl_FragColor = color;
    }
}
